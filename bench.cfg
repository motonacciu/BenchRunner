[Benchmark]
# all the parameters in the default section are varied in an exhaustive way
# all the possible combinations (according to the invariants) are tested

# Tells to BenchRunner how many runs to perform for each configuration
num_of_runs:    10 

# A variable storing the folder where the temporary data generated by 
# BenchRunner will be stored
out_dir:    	./bench_tmp/

# The 'file_name' variable has a special meaning for BenchRunner therefore 
# it is mandatory, this variable points to the file where the output of the 
# current program run is stored (this variable is used later on to extract 
# data from the stream)
file_name:  	s"{out_dir}/mat_mul.txt"

# before the benchmarks are executed, BenchRunner execute the init command.
# The user can specify here a command which needs to be executed before the 
# tested program is executed, for example creation of temporary directories 
# or compilation of the executable (it can be empty) 
initialize: 	mkdir {out_dir}

# This is the command which is repeatedly executed on the target machine
# the variables ({ }) will be replaced by BenchRunner with different values 
# until all the combinations have been executed 
benchmark:   python mat_mul.py {mat_size} >> {file_name}

# define a new variable which represent the input sizes we want to test in
# this benchmark
mat_size:    	[1, 10, 25, 50, 100, 150, 200, 250]

[Optimize]

[Constraints]

[Extract]
# The 'experment_data' variable has a special meaning to BenchRunner, it is 
# mandatory when the [Extract] section is declared. It tells to BenchRunner 
# the regular expression he has to look for in order to find specific 
# information in the program output. We expect time to be represented as a 
# floating number (i.e. \d+\.\d+)
experiment_data:  [Initialization time:\s+, Multiplication time:\s+]

[Elaborate]
# The 'in_file_format' variable has a special meaning for BenchRunner and 
# tells how the format of output file produced by the executed program. 
# In the case the [Extract] section is present, this is the format of 
# the file after the regular expressions have been extracted from the 
# file 
in_file_format:   [init_time, mul_time]
speedup_idx:	  0
# This variable tells BenchRunner where to store the result of the benchmark
out_file_name: 	  mat_mul.csv
# This variable tells BenchRunner how to format the output file and which
# information has to be produced. The special keywords: AVG, STD, MIN, MAX 
# can be used to elaborate the aggregated results
out_file_format:  [ mat_size, AVG(init_time), STD(init_time), AVG(mul_time), STD(mul_time) ]
